<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>你好，李哲</title>
    <link>https://forkeep.github.io/</link>
    <description>Recent content on 你好，李哲</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Wed, 25 Mar 2020 23:16:37 +0800</lastBuildDate>
    
	<atom:link href="https://forkeep.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vue中的.sync修饰符</title>
      <link>https://forkeep.github.io/posts/vue%E4%B8%AD%E7%9A%84.sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Wed, 25 Mar 2020 23:16:37 +0800</pubDate>
      
      <guid>https://forkeep.github.io/posts/vue%E4%B8%AD%E7%9A%84.sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      <description>前情提要 Vue的一些规则  组件不能修改外部的props的数据 $emit()可以触发事件并且传参 $event 可以获得$emit的参数 上述为发布和订阅模式  场景 组件A传参给组件B，这个参数称之为money，组件B想要修改money的值，如果在组件B内直接修改这个props，则在组件A渲染时不奏效，会按照组件A之前的money值渲染，所以为了解决这个问题，我们怎么办？
基本解法 //App.vue &amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;app&amp;#34;&amp;gt; App.vue 我现在有 {{total}} &amp;lt;hr&amp;gt; &amp;lt;Child :money=&amp;#34;total&amp;#34; v-on:update:money=&amp;#34;total = $event&amp;#34;/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; import Child from &amp;#34;./Child.vue&amp;#34;; export default { data() { return { total: 10000 }; }, components: { Child: Child } }; &amp;lt;/script&amp;gt; &amp;lt;style&amp;gt; .app { border: 3px solid red; padding: 10px; } &amp;lt;/style&amp;gt; //Child.vue &amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;child&amp;#34;&amp;gt; {{money}} &amp;lt;button @click=&amp;#34;$emit(&amp;#39;update:money&amp;#39;, money-100)&amp;#34;&amp;gt; &amp;lt;span&amp;gt;花钱&amp;lt;/span&amp;gt; &amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { props: [&amp;#34;money&amp;#34;] }; &amp;lt;/script&amp;gt; &amp;lt;style&amp;gt; .</description>
    </item>
    
    <item>
      <title>正则表达式全解Js</title>
      <link>https://forkeep.github.io/posts/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A8%E8%A7%A3js/</link>
      <pubDate>Mon, 23 Mar 2020 10:28:46 +0800</pubDate>
      
      <guid>https://forkeep.github.io/posts/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A8%E8%A7%A3js/</guid>
      <description>正则表达式（JavaScript）  第一章 正则匹配全解 本章知识结构图 graph LR; 正则匹配--&amp;gt;精确匹配 --&amp;gt;jq[&amp;quot;/hello/&amp;quot;]; 正则匹配--&amp;gt;模糊匹配; 模糊匹配--&amp;gt;横向模糊匹配 --&amp;gt;mhh[&amp;quot;/abc{1,3}d/&amp;quot;]; 模糊匹配--&amp;gt;纵向模糊匹配--&amp;gt;mhz[&amp;quot;/abc[123]d/&amp;quot;]; 正则匹配--&amp;gt;字符串组--&amp;gt;zfcz[&amp;quot;[a-z]、[^abc]&amp;quot;]; 正则匹配--&amp;gt;量词--&amp;gt;lc[&amp;quot;{m,}、{m}、?、*、+&amp;quot;]; 正则匹配--&amp;gt;贪婪匹配--&amp;gt;tl[&amp;quot;/\d{2,5}/ 尽可能多的匹配&amp;quot;]; 正则匹配--&amp;gt;惰性匹配--&amp;gt;dx[&amp;quot;/\d{2,5}?/ 尽可能少的匹配&amp;quot;]; 正则匹配--&amp;gt;多选分支--&amp;gt;duox[&amp;quot;/good|night/&amp;quot;];  精确匹配：简言之就是精确地匹配出模式字符串 模糊匹配：使用正则的规则，按照规则匹配出一系列的符合条件的字符串 横向模糊匹配：格式如 /abc{1,5}d/意为匹配c出现1~5次之间都可以 纵向模糊匹配：格式如/abc[def]/意为匹配中abc后边出现d、e、f任何之一就可以 字符组：形如[abc]意为匹配一个字符，为abc任意一个，用在纵向模糊匹配中     字符组 含义     \d [0-9]   \D [^0-9]   \s [\t\v\n\r\f]空白符   \S [^\t\v\n\r\f]   \w [0-9a-zA-Z]   \W [^0-9a-zA-Z]   . 通配符[^\n\r\u2028\u2029]几乎表示任何字符   [\d\D] [\S\s] [\W\w]  [^] 表示任意字符     量词：形如{1，5}意为匹配的前一个字符出现1~5任意次数均可匹配  </description>
    </item>
    
    <item>
      <title>算法 罗马数字转整数</title>
      <link>https://forkeep.github.io/posts/%E7%AE%97%E6%B3%95-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</link>
      <pubDate>Mon, 23 Mar 2020 10:03:40 +0800</pubDate>
      
      <guid>https://forkeep.github.io/posts/%E7%AE%97%E6%B3%95-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</guid>
      <description>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.
Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 For example, two is written as II in Roman numeral, just two one&amp;rsquo;s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</description>
    </item>
    
    <item>
      <title>算法 判断是否是3的多次方</title>
      <link>https://forkeep.github.io/posts/%E7%AE%97%E6%B3%95-%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF3%E7%9A%84%E5%A4%9A%E6%AC%A1%E6%96%B9/</link>
      <pubDate>Sun, 22 Mar 2020 20:17:35 +0800</pubDate>
      
      <guid>https://forkeep.github.io/posts/%E7%AE%97%E6%B3%95-%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF3%E7%9A%84%E5%A4%9A%E6%AC%A1%E6%96%B9/</guid>
      <description>Given an integer, write a function to determine if it is a power of three.
Example 1:
Input: 27 Output: true Example 2:
Input: 0 Output: false Example 3:
Input: 9 Output: true Example 4:
Input: 45 Output: false 题意： 判断一个输入的数字是不是3的n次方。
思路：  可以让这个数字除以3，判断结果是不是3的次方，循环进行到最后，判断结果是不是1，如果是1那么这个数字就是3的n次方。 由于题目中让我们思考如何不用循环解题，那么就需要投机的方法。我们发现，在INT类型数据最大值区间内0~231 之间，在这个区间最大的3的次方数是319次方，也就是1162261467，所以如果可以被1162261467整除也就可以是3的整数次方。  步骤：  判断这个数字大于0并且可以被1162261467整除  代码实现 /** * @param {number} n * @return {boolean} */ var isPowerOfThree = function(n) { return (n &amp;gt; 0 &amp;amp;&amp;amp; 1162261467 % n == 0); }; </description>
    </item>
    
    <item>
      <title>算法-回文字符串</title>
      <link>https://forkeep.github.io/posts/%E7%AE%97%E6%B3%95-%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Fri, 20 Mar 2020 10:15:55 +0800</pubDate>
      
      <guid>https://forkeep.github.io/posts/%E7%AE%97%E6%B3%95-%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.
Note: For the purpose of this problem, we define empty string as valid palindrome.
Example 1:
Input: &amp;quot;A man, a plan, a canal: Panama&amp;quot; Output: true Example 2:
Input: &amp;quot;race a car&amp;quot; Output: false 题意： 输入一个字符串，返回一个布尔值，判断这个字符串是不是回文字符串，题目假设，&amp;lsquo;&amp;lsquo;空字符串为回文字符串。
思路： 对输入的字符串进行判断，是否是空，不是空则把标点符号去掉，且全部小写，然后进行判断。
步骤：  判断是否为空，空字符串返回true 正则匹配，所有不是字母的都替换为空，并且全部小写 循环判断第i个字符和第s.length-i-1 个字符是否相等  代码实现： /** * @param {string} s * @return {boolean} */ var isPalindrome = function(s) { if(s ===&amp;#39;&amp;#39;)return true s = s.</description>
    </item>
    
    <item>
      <title>算法-第一个不重复字符</title>
      <link>https://forkeep.github.io/posts/%E7%AE%97%E6%B3%95-%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Thu, 19 Mar 2020 16:59:41 +0800</pubDate>
      
      <guid>https://forkeep.github.io/posts/%E7%AE%97%E6%B3%95-%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6/</guid>
      <description>Given a string, find the first non-repeating character in it and return it&amp;rsquo;s index. If it doesn&amp;rsquo;t exist, return -1.
Examples:
s = &amp;quot;leetcode&amp;quot; return 0. s = &amp;quot;loveleetcode&amp;quot;, return 2. Note: You may assume the string contain only lowercase letters.
题意： 给一个字符串，找出第一个字母（这个字母在字符串中只出现一次）
思路： 找出所有字母出现的此处，然后再找出第一个次数为1的这个字母返回
步骤：   遍历字符串，将每个字母出现次数之和统计到hash表中
  再按顺序进行遍历，对比字母出现次数是否为1
  代码实现： /* * @lc app=leetcode.cn id=387 lang=javascript * * [387] 字符串中的第一个唯一字符 */ // @lc code=start /** * @param {string} s * @return {number} */ var firstUniqChar = function(s) { const hashMap = {} for(let i=0;i&amp;lt;s.</description>
    </item>
    
    <item>
      <title>算法-旋转图像</title>
      <link>https://forkeep.github.io/posts/%E7%AE%97%E6%B3%95-%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</link>
      <pubDate>Thu, 19 Mar 2020 16:51:40 +0800</pubDate>
      
      <guid>https://forkeep.github.io/posts/%E7%AE%97%E6%B3%95-%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</guid>
      <description>You are given an n x n 2D matrix representing an image.
Rotate the image by 90 degrees (clockwise).
Example 1:
Given input matrix = [ [1,2,3], [4,5,6], [7,8,9] ], rotate the input matrix in-place such that it becomes: [ [7,4,1], [8,5,2], [9,6,3] ] Example 2:
Given input matrix = [ [ 5, 1, 9,11], [ 2, 4, 8,10], [13, 3, 6, 7], [15,14,12,16] ], rotate the input matrix in-place such that it becomes: [ [15,13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7,10,11] ] 题意： 旋转图片，因为图片是由矩阵数据表示的，所以可以吧一个矩阵当做是一个图片，顺时针旋转90度。</description>
    </item>
    
    <item>
      <title>算法-Valid Sudoku</title>
      <link>https://forkeep.github.io/posts/sudoki-valid/</link>
      <pubDate>Wed, 18 Mar 2020 16:25:47 +0800</pubDate>
      
      <guid>https://forkeep.github.io/posts/sudoki-valid/</guid>
      <description>算法-数独正确性检验（ Valid Sudoku） 原题目： etermine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:
 Each row must contain the digits 1-9 without repetition. Each column must contain the digits 1-9 without repetition. Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.  A partially filled sudoku which is valid.
The Sudoku board could be partially filled, where empty cells are filled with the character &#39;.</description>
    </item>
    
    <item>
      <title>算法 Remove Duplicates from Sorted Array</title>
      <link>https://forkeep.github.io/posts/%E7%AE%97%E6%B3%95-remove/</link>
      <pubDate>Mon, 16 Mar 2020 10:42:55 +0800</pubDate>
      
      <guid>https://forkeep.github.io/posts/%E7%AE%97%E6%B3%95-remove/</guid>
      <description>算法-Remove Duplicates from Sorted Array Remove Duplicates from Sorted Array
Example 1:
Given nums = [1,1,2], Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn&#39;t matter what you leave beyond the returned length. Example 2:
Given nums = [0,0,1,1,1,2,2,3,3,4], Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.</description>
    </item>
    
    <item>
      <title>算法-Best Time to Buy and Sell Stock II</title>
      <link>https://forkeep.github.io/posts/%E7%AE%97%E6%B3%95-2%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 16 Mar 2020 10:29:59 +0800</pubDate>
      
      <guid>https://forkeep.github.io/posts/%E7%AE%97%E6%B3%95-2%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/</guid>
      <description>算法-Best Time to Buy and Sell Stock II Best Time to Buy and Sell Stock II
Example 1:
Input: [7,1,5,3,6,4] Output: 7 Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Example 2:
Input: [1,2,3,4,5] Output: 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.</description>
    </item>
    
    <item>
      <title>算法-股票问题</title>
      <link>https://forkeep.github.io/posts/suanfa-gupiaowenti/</link>
      <pubDate>Mon, 16 Mar 2020 10:28:31 +0800</pubDate>
      
      <guid>https://forkeep.github.io/posts/suanfa-gupiaowenti/</guid>
      <description>算法-Best Time to Buy and Sell Stock II Best Time to Buy and Sell Stock II
Example 1:
Input: [7,1,5,3,6,4] Output: 7 Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Example 2:
Input: [1,2,3,4,5] Output: 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.</description>
    </item>
    
    <item>
      <title>浅析URL</title>
      <link>https://forkeep.github.io/posts/url%E6%B5%85%E6%9E%90/</link>
      <pubDate>Tue, 25 Feb 2020 15:11:59 +0800</pubDate>
      
      <guid>https://forkeep.github.io/posts/url%E6%B5%85%E6%9E%90/</guid>
      <description>浅析URL 此处在掘金社区</description>
    </item>
    
    <item>
      <title>CSS知识总结</title>
      <link>https://forkeep.github.io/posts/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 25 Feb 2020 10:34:59 +0800</pubDate>
      
      <guid>https://forkeep.github.io/posts/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</guid>
      <description>CSS知识总结 此处在掘金社区</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>https://forkeep.github.io/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Sun, 23 Feb 2020 19:11:59 +0800</pubDate>
      
      <guid>https://forkeep.github.io/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>HTML常用标签 此处在掘金社区</description>
    </item>
    
    <item>
      <title>使用Hugo和Github搭建个人博客</title>
      <link>https://forkeep.github.io/posts/my-first-post/</link>
      <pubDate>Sun, 23 Feb 2020 19:11:59 +0800</pubDate>
      
      <guid>https://forkeep.github.io/posts/my-first-post/</guid>
      <description>使用Hugo和Github搭建个人博客 此处在掘金社区</description>
    </item>
    
    <item>
      <title>HTML入门笔记</title>
      <link>https://forkeep.github.io/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 21 Feb 2020 19:11:59 +0800</pubDate>
      
      <guid>https://forkeep.github.io/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</guid>
      <description>HTML入门笔记 此处在掘金社区</description>
    </item>
    
  </channel>
</rss>